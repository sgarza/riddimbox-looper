{"version":3,"file":"index.esm.bundle.js","sources":["../src/looper.js","../src/providers/tone-mediarecorder-provider.js","../src/constants.js","../src/providers/riddimbox-transport-provider.js"],"sourcesContent":["class Looper {\n  static _mediaRecorderProvider = null;\n  static _transportProvider = null;\n\n  static get mediaRecorderProvider() {\n    Looper._throwIfMediaRecorderProvderNotSet();\n    return Looper._mediaRecorderProvider;\n  }\n\n  static get transportProvider() {\n    Looper._throwIfTransportProviderNotSet();\n    return Looper._transportProvider;\n  }\n\n  static get loops() {\n    return Looper.mediaRecorderProvider.loops;\n  }\n\n  static get currentLoopLength() {\n    return Looper.transportProvider.currentLoopLength;\n  }\n\n  static set mediaRecorderProvider(mediaRecorderProvider) {\n    Looper._mediaRecorderProvider = mediaRecorderProvider;\n  }\n\n  static set transportProvider(transportProvider) {\n    Looper._transportProvider = transportProvider;\n\n    Looper._setupTransportEvents();\n  }\n\n  static set input(input) {\n    Looper.mediaRecorderProvider.input = input;\n  }\n\n  static set output(output) {\n    Looper.mediaRecorderProvider.output = output;\n  }\n\n  static startRecording() {\n    Looper.mediaRecorderProvider.startRecording();\n  }\n\n  static stopRecording() {\n    Looper.mediaRecorderProvider.stopRecording();\n  }\n\n  static restartRecording() {\n    Looper.mediaRecorderProvider.stopRecording();\n    Looper.mediaRecorderProvider.startRecording();\n  }\n\n  static selectCurrentLoop() {\n    Looper._throwIfTransportProviderNotSet();\n    Looper.mediaRecorderProvider.selectCurrentLoop = true;\n  }\n\n  static increaseCurrentLoopLength() {\n    Looper.transportProvider.increaseCurrentLoopLength();\n  }\n\n  static decreaseCurrentLoopLength() {\n    Looper.transportProvider.decreaseCurrentLoopLength();\n  }\n\n  static _throwIfMediaRecorderProvderNotSet() {\n    if (!Looper._mediaRecorderProvider) {\n      throw new Error(\n        \"You need to set a MediaRecorderProvider first, try with ToneMediaRecorderProvider class.\"\n      );\n    }\n  }\n\n  static _throwIfTransportProviderNotSet() {\n    if (!Looper._transportProvider) {\n      throw new Error(\n        \"You need to set a TransportProvider first, try with RiddimBoxTransportProvider class.\"\n      );\n    }\n  }\n\n  static _setupTransportEvents() {\n    Looper.transportProvider.on(\"start\", Looper.startRecording);\n    Looper.transportProvider.on(\"stop\", Looper.stopRecording);\n    Looper.transportProvider.on(\"loop\", Looper.restartRecording);\n  }\n}\n\nexport default Looper;\n","class ToneMediaRecorderProvider {\n  constructor(Tone, MediaRecorder) {\n    this.engine = Tone;\n    this.MediaRecorder = MediaRecorder;\n    this.recorderStreamDestination = null;\n    this.recorder = null;\n    this.selectCurrentLoop = false;\n    this.loops = [];\n    this._output = Tone.Master;\n\n    this._setupMediaRecorder();\n  }\n\n  set input(input) {\n    input.connect(this.recorderStreamDestination);\n  }\n\n  set output(output) {\n    this.loops.forEach(loop => {\n      loop.player.disconnect(this._output);\n      loop.player.connect(output);\n    });\n\n    this._output = output;\n  }\n\n  startRecording() {\n    this.recorder.start();\n  }\n\n  stopRecording() {\n    this.recorder.stop();\n  }\n\n  _setupMediaRecorder() {\n    this.recorderStreamDestination = this.engine.context.createMediaStreamDestination();\n    this.recorder = new this.MediaRecorder(\n      this.recorderStreamDestination.stream\n    );\n\n    this.recorder.ondataavailable = this._onDataAvailableHandler;\n  }\n\n  _onDataAvailableHandler(e) {\n    if (!this.selectCurrentLoop) return;\n\n    this.selectCurrentLoop = false;\n\n    const blob = new Blob([e.data], {\n      type: \"audio/webm;; codec=opus\"\n    });\n\n    const url = URL.createObjectURL(blob);\n\n    const buffer = new this.engine.Buffer(url, () => {\n      this._createBufferCallback(buffer);\n    });\n  }\n\n  _createBufferCallback(buffer) {\n    const player = new this.engine.Player(buffer);\n\n    player.connect(this._output);\n\n    this.loops.push({\n      player\n    });\n  }\n}\n\nexport default ToneMediaRecorderProvider;\n","export default {\n  MEDIA_RECORDER_RECORDING: \"recording\",\n  MEDIA_RECORDER_INACTIVE: \"inactive\",\n  MIN_LOOP_LENGTH: 4,\n  MAX_LOOP_LENGTH: 64\n};\n","import constants from \"../constants\";\nconst { MIN_LOOP_LENGTH, MAX_LOOP_LENGTH } = constants;\n\nclass RiddimBoxTransportProvider {\n  constructor(Transport) {\n    this.transport = Transport;\n    this.currentLoopLength = MIN_LOOP_LENGTH;\n\n    this.transport.on(\"beat\", beats => {\n      if (beats % this.currentLoopLength === 0) {\n        this.transport.provider.emit(\"loop\");\n      }\n    });\n  }\n\n  on(event, handler) {\n    this.transport.on(event, handler);\n  }\n\n  increaseCurrentLoopLength() {\n    let length = this.currentLoopLength + MIN_LOOP_LENGTH;\n\n    if (length > MAX_LOOP_LENGTH) {\n      length = MIN_LOOP_LENGTH;\n    }\n\n    this.currentLoopLength = length;\n  }\n\n  decreaseCurrentLoopLength() {\n    let length = this.currentLoopLength - MIN_LOOP_LENGTH;\n\n    if (length < MIN_LOOP_LENGTH) {\n      length = MAX_LOOP_LENGTH;\n    }\n\n    this.currentLoopLength = length;\n  }\n}\n\nexport default RiddimBoxTransportProvider;\n"],"names":["Looper","mediaRecorderProvider","startRecording","stopRecording","_throwIfTransportProviderNotSet","selectCurrentLoop","transportProvider","increaseCurrentLoopLength","decreaseCurrentLoopLength","_mediaRecorderProvider","Error","_transportProvider","on","restartRecording","_throwIfMediaRecorderProvderNotSet","_setupTransportEvents","loops","currentLoopLength","input","output","ToneMediaRecorderProvider","Tone","MediaRecorder","engine","recorderStreamDestination","recorder","_output","Master","_setupMediaRecorder","start","stop","context","createMediaStreamDestination","stream","ondataavailable","_onDataAvailableHandler","e","blob","Blob","data","type","url","URL","createObjectURL","buffer","Buffer","_createBufferCallback","player","Player","connect","push","forEach","loop","disconnect","MEDIA_RECORDER_RECORDING","MEDIA_RECORDER_INACTIVE","MIN_LOOP_LENGTH","MAX_LOOP_LENGTH","constants","RiddimBoxTransportProvider","Transport","transport","beats","provider","emit","event","handler","length"],"mappings":"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"}