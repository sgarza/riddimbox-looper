{"version":3,"file":"index.esm.bundle.js","sources":["../src/looper.js","../src/constants.js","../src/providers/tone-mediarecorder-provider.js","../src/providers/riddimbox-transport-provider.js"],"sourcesContent":["class Looper {\n  static _mediaRecorderProvider = null;\n  static _transportProvider = null;\n\n  static get mediaRecorderProvider() {\n    Looper._throwIfMediaRecorderProvderNotSet();\n    return Looper._mediaRecorderProvider;\n  }\n\n  static get transportProvider() {\n    Looper._throwIfTransportProviderNotSet();\n    return Looper._transportProvider;\n  }\n\n  static get loops() {\n    return Looper.mediaRecorderProvider.loops;\n  }\n\n  static get currentLoopLength() {\n    return Looper.transportProvider.currentLoopLength;\n  }\n\n  static set mediaRecorderProvider(mediaRecorderProvider) {\n    Looper._mediaRecorderProvider = mediaRecorderProvider;\n  }\n\n  static set transportProvider(transportProvider) {\n    Looper._transportProvider = transportProvider;\n\n    Looper._setupTransportEvents();\n  }\n\n  static set input(input) {\n    Looper.mediaRecorderProvider.input = input;\n  }\n\n  static set output(output) {\n    Looper.mediaRecorderProvider.output = output;\n  }\n\n  static startRecording() {\n    Looper.mediaRecorderProvider.startRecording();\n  }\n\n  static stopRecording() {\n    Looper.mediaRecorderProvider.stopRecording();\n  }\n\n  static restartRecording() {\n    Looper.mediaRecorderProvider.stopRecording();\n    Looper.mediaRecorderProvider.startRecording();\n  }\n\n  static selectCurrentLoop() {\n    Looper._throwIfTransportProviderNotSet();\n    Looper.mediaRecorderProvider.selectCurrentLoop = true;\n  }\n\n  static increaseCurrentLoopLength() {\n    Looper.transportProvider.increaseCurrentLoopLength();\n    Looper.mediaRecorderProvider.currentLoopLength = Looper.currentLoopLength;\n  }\n\n  static decreaseCurrentLoopLength() {\n    Looper.transportProvider.decreaseCurrentLoopLength();\n    Looper.mediaRecorderProvider.currentLoopLength = Looper.currentLoopLength;\n  }\n\n  static playbackLoops({ totalBeats }) {\n    const startTimeOffset = Looper.mediaRecorderProvider.ticksToTime;\n\n    Looper.loops\n      .filter(loop => totalBeats % loop.length === 0)\n      .forEach(loop =>\n        loop.player.start(\n          Looper.mediaRecorderProvider.currentTime,\n          startTimeOffset\n        )\n      );\n  }\n\n  static _throwIfMediaRecorderProvderNotSet() {\n    if (!Looper._mediaRecorderProvider) {\n      throw new Error(\n        \"You need to set a MediaRecorderProvider first, try with ToneMediaRecorderProvider class.\"\n      );\n    }\n  }\n\n  static _throwIfTransportProviderNotSet() {\n    if (!Looper._transportProvider) {\n      throw new Error(\n        \"You need to set a TransportProvider first, try with RiddimBoxTransportProvider class.\"\n      );\n    }\n  }\n\n  static _setupTransportEvents() {\n    Looper.transportProvider.on(\"start\", Looper.startRecording);\n    Looper.transportProvider.on(\"stop\", Looper.stopRecording);\n    Looper.transportProvider.on(\"loop\", Looper.restartRecording);\n    Looper.transportProvider.on(\"beat\", Looper.playbackLoops);\n  }\n}\n\nexport default Looper;\n","export default {\n  MEDIA_RECORDER_RECORDING: \"recording\",\n  MEDIA_RECORDER_INACTIVE: \"inactive\",\n  MIN_LOOP_LENGTH: 4,\n  MAX_LOOP_LENGTH: 64,\n  DEFAULT_TICKS_TO_TIME_VALUE: 25\n};\n","import constants from \"../constants\";\nconst { PPQN, MIN_LOOP_LENGTH } = constants;\n\nclass ToneMediaRecorderProvider {\n  constructor(Tone, MediaRecorder) {\n    this.engine = Tone;\n    this.MediaRecorder = MediaRecorder;\n    this.recorderStreamDestination = null;\n    this.recorder = null;\n    this.selectCurrentLoop = false;\n    this.currentLoopLength = MIN_LOOP_LENGTH;\n    this.loops = [];\n    this._output = Tone.Master;\n\n    this._setupMediaRecorder();\n  }\n\n  get ticksToTime() {\n    const { bpm } = this.engine.Transport;\n    return bpm.ticksToTime(this.engine.Transport.ticks % PPQN);\n  }\n\n  get currentTime() {\n    return this.engine.context.currentTime;\n  }\n\n  set input(input) {\n    input.connect(this.recorderStreamDestination);\n  }\n\n  set output(output) {\n    this.loops.forEach(loop => {\n      loop.player.disconnect(this._output);\n      loop.player.connect(output);\n    });\n\n    this._output = output;\n  }\n\n  startRecording() {\n    this.recorder.start();\n  }\n\n  stopRecording() {\n    this.recorder.stop();\n  }\n\n  _setupMediaRecorder() {\n    this.recorderStreamDestination = this.engine.context.createMediaStreamDestination();\n    this.recorder = new this.MediaRecorder(\n      this.recorderStreamDestination.stream\n    );\n\n    this.recorder.ondataavailable = this._onDataAvailableHandler;\n  }\n\n  _onDataAvailableHandler(e) {\n    if (!this.selectCurrentLoop) return;\n\n    this.selectCurrentLoop = false;\n\n    const blob = new Blob([e.data], {\n      type: \"audio/webm;; codec=opus\"\n    });\n\n    const url = URL.createObjectURL(blob);\n\n    const buffer = new this.engine.Buffer(url, () => {\n      this._createBufferCallback(buffer);\n    });\n  }\n\n  _createBufferCallback(buffer) {\n    const player = new this.engine.Player(buffer);\n\n    player.connect(this._output);\n\n    const startTimeOffset = this.ticksToTime;\n\n    player.start(this.currentTime, startTimeOffset);\n\n    this.loops.push({\n      length: this.currentLoopLength,\n      player\n    });\n  }\n}\n\nexport default ToneMediaRecorderProvider;\n","import constants from \"../constants\";\nconst { MIN_LOOP_LENGTH, MAX_LOOP_LENGTH } = constants;\n\nclass RiddimBoxTransportProvider {\n  constructor(Transport) {\n    this.transport = Transport;\n    this.currentLoopLength = MIN_LOOP_LENGTH;\n\n    this.transport.on(\"beat\", ({ beats }) => {\n      if (beats % this.currentLoopLength === 0) {\n        this.transport.provider.emit(\"loop\");\n      }\n    });\n  }\n\n  on(event, handler) {\n    this.transport.on(event, handler);\n  }\n\n  increaseCurrentLoopLength() {\n    let length = this.currentLoopLength + MIN_LOOP_LENGTH;\n\n    if (length > MAX_LOOP_LENGTH) {\n      length = MIN_LOOP_LENGTH;\n    }\n\n    this.currentLoopLength = length;\n  }\n\n  decreaseCurrentLoopLength() {\n    let length = this.currentLoopLength - MIN_LOOP_LENGTH;\n\n    if (length < MIN_LOOP_LENGTH) {\n      length = MAX_LOOP_LENGTH;\n    }\n\n    this.currentLoopLength = length;\n  }\n}\n\nexport default RiddimBoxTransportProvider;\n"],"names":["Looper","mediaRecorderProvider","startRecording","stopRecording","_throwIfTransportProviderNotSet","selectCurrentLoop","transportProvider","increaseCurrentLoopLength","currentLoopLength","decreaseCurrentLoopLength","totalBeats","startTimeOffset","ticksToTime","loops","filter","loop","length","forEach","player","start","currentTime","_mediaRecorderProvider","Error","_transportProvider","on","restartRecording","playbackLoops","_throwIfMediaRecorderProvderNotSet","_setupTransportEvents","input","output","MEDIA_RECORDER_RECORDING","MEDIA_RECORDER_INACTIVE","MIN_LOOP_LENGTH","MAX_LOOP_LENGTH","DEFAULT_TICKS_TO_TIME_VALUE","PPQN","constants","ToneMediaRecorderProvider","Tone","MediaRecorder","engine","recorderStreamDestination","recorder","_output","Master","_setupMediaRecorder","stop","context","createMediaStreamDestination","stream","ondataavailable","_onDataAvailableHandler","e","blob","Blob","data","type","url","URL","createObjectURL","buffer","Buffer","_createBufferCallback","Player","connect","push","bpm","Transport","ticks","disconnect","RiddimBoxTransportProvider","transport","beats","provider","emit","event","handler"],"mappings":"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"}